# Código para limpeza da tela
cat("\014")
#Código para limpar a variable explorer
rm(list=ls())
#Instalando o pacote
install.packages("pracma")
install.packages('NlcOptim')
#Carregar a biblioteca
library("pracma")
library('NlcOptim')
#Função objetivo
eval_f <- function(x){
f1 = 2629
f1a = 4418
f2 = 520
f3 = 6670
obj = (f1 - x[1])**2 + (f1a - x[2])**2 + (f2 - x[3])**2 + (f3 - x[4])**2
return(obj)
}
#Definição da restrição:
A = matrix(c(1, 1, 1, -1),
ncol = 4)
b = c(0)
#Testando a função:
#Estimativa inicial
x0 = c(2600,4400,500,6000)
# eval_f(po)
#Opções de otimização:
opts = list("algorithm"="NLOPT_LN_SBPLX",
"xtol_rel"=1.0e-4)
#Minimizando a função:
resultado = fmincon(x0,
eval_f,
method='SQP',
A = A,
b = b)
View(resultado)
View(resultado)
#Resultado:
vetorresultado = resultado$par
#Restrição respeitada:
eval_g_eq = function(x){
constr = c(x[1] + x[2] + x[3] - x[4])
}
eval_g_eq(resultado$par)
#Restrição respeitada:
eval_g_eq = function(x){
constr = c(x[1] + x[2] + x[3] - x[4])
return constr
}
eval_g_eq = function(x){
constr = c(x[1] + x[2] + x[3] - x[4])
return(constr)
}
valor = eval_g_eq(resultado$par)
library(ggplot2)
library(ggradar)
library(dplyr)
library(scales)
data(mtcars)
View(mtcars)
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3) %>% select(1:10) = mtcars_radar
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3) %>% select(1:10) -> mtcars_radar
#This code would generate lots of warnings, so we will supress them
options(warn = -1)
#Run de ggradar
ggradar(mtcars_radar)
library(ggradar)
install.packages("ggradar")
install.packages("scales")
install.packages("scales")
library(ggplot2)
library(ggradar)
install.packages("ggradar")
library(ggradar)
#This provides the pipe operation
# Takes the output of one function and provides to another
library(dplyr)
#Methods for label, and legends
library(scales)
data(mtcars)
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3) %>% select(1:10) -> mtcars_radar
#This code would generate lots of warnings, so we will supress them
options(warn = -1)
#Run de ggradar
ggradar(mtcars_radar)
install.packages("ggradar")
devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
library(devtools)
install.packages("devtools")
library(devtools)
devtools::install_github("ricardo-bion/ggradar", dependencies=TRUE)
install.packages("ggradar")
library(ggplot2)
library(ggradar)
install.packages("remotes")
remotes::install_github("ricardo-bion/ggradar")
install.packages("remotes")
remotes::install_github("ricardo-bion/ggradar")
install.packages("glue")
install.packages("glue")
remotes::install_github("ricardo-bion/ggradar")
library(ggradar)
#This provides the pipe operation
# Takes the output of one function and provides to another
library(dplyr)
library(ggplot2)
#Methods for label, and legends
library(scales)
data(mtcars)
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3) %>% select(1:10) -> mtcars_radar
#This code would generate lots of warnings, so we will supress them
options(warn = -1)
#Run de ggradar
ggradar(mtcars_radar)
View(mtcars)
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
c(5:7) %>% select(1:10) -> mtcars_radar
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3:5) %>% select(1:10) -> mtcars_radar
#Pipe Operator
mtcars %>%
#Atribuir nome de linhas para uma variável
add_rownames(var = "group") %>%
mutate_each(funs(rescale), -group) %>%
#Selecionar os dados para plotar
#Estas são as variáveis (features, colunas) em select e
#Em head estamos selecionando as linhas, as observações
head(3) %>% select(1:10) -> mtcars_radar
#Run de ggradar
ggradar(mtcars_radar)
#Run de ggradar
IRkernel::set_plot_options(width = 950, height = 600, units = 'px')
ggradar(mtcars_radar)
install.packages("IRkernel")
#Run de ggradar
IRkernel::set_plot_options(width = 950, height = 600, units = 'px')
ggradar(mtcars_radar)
ggradar(mtcars_radar)
#Run de ggradar
IRkernel::set_plot_options(width = 950, height = 600, units = 'px')
ggradar(mtcars_radar)
#Run de ggradar
library(IRkernel)
IRkernel::set_plot_options(width = 950, height = 600, units = 'px')
ggradar(mtcars_radar)
insinstall.packages("waffle")
install.packages("waffle")
library(ggplot2)
library(waffle)
expenses = c('Health ($43,212)' = 43212,
'Education ($113,412)' = 113412,
'Transportation ($20231)' = 20231,
'Entertainment ($28,145)' = 28145)
type(expenses)
class(expenses)
inspect(expenses)
#Fazer quadradinhos de mesma proporção
# Definir número de linhas
#Tamanho dos quadradinhos
#Cores utilizadas (Proporcional ao número de categorias)
waffle(expenses/1235, rows = 5, size = 0.3,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Imaginary Household Expenses Each Year",
xlab="1 square = $934")
#Fazer quadradinhos de mesma proporção
# Definir número de linhas
#Tamanho dos quadradinhos
#Cores utilizadas (Proporcional ao número de categorias)
IRkernel::set_plot_options(width=950, height=600, units='px')
set.seed(1234)
df = data.frame(label1 = factor(rep(c("A","B"), each = 200)),
value = c(set_a,set_b))
set_a = rnorm(200, mean=1, sd=2)
set_b = rnorm(200, mean=0, sd=1)
library(ggplot2)
ggplot(data = set_a)
ggplot(data = df, aes(x = set_a, y = set_b))
library(ggplot2)
ggplot(data = df, aes(x = set_a, y = set_b))
ggplot(df, aes(x = set_a, y = set_b))
df = data.frame(label1 = factor(rep(c("A","B"), each = 200)),
value = c(set_a,set_b))
View(df)
View(df)
ggplot(df, aes(x = label1 y = value))
ggplot(df, aes(x = label1, y = value))
ggplot(df, aes(x = value))
qplot(x = df$value)
hist(set_a)
hist(set_b)
head(df)
tail(df)
install.packages("ploptly")
library(ploptly)
install.packages("plotly")
library(plotly)
ggplot(df, aes(x=label, y=value)) + geom_boxplot()
ggplot(df, aes(x=label1, y=value)) + geom_boxplot()
library(MASS)
library(reshape2)
library(reshape)
print(head(ships, n = 10))
print(molten_ships)
shipdata = (head(ships, n=10))
molten_ships = melt(shipdata, id= ("type", "year"))
print(molten_ships)
shipdata = (head(ships, n=10))
molten_ships = melt(shipdata, id= ("type", "year"))
View(shipdata)
View(shipdata)
molten_ships = melt(shipdata, id= c("type", "year"))
print(molten_ships)
library(ggplot2)
ggplot(molten_ships, aes(x = variable, y = value)) + geom_boxplot()
ggplot(df, aes(x=label1, y=value)) + geom_boxplot()
ggplotly()
ggplotly()
ggplot(molten_ships, aes(x = variable, y = value)) + geom_boxplot()
ggplotly()
data(mtcars)
qplot(factor(cyl), mpg, data = mtcars, geom="boxplot")
qplot(factor(cyl), y = mpg, data = mtcars, geom="boxplot")
qplot(x = factor(cyl),
y = mpg,
data = mtcars,
geom="boxplot")
View(mtcars)
qplot(x = factor(gear),
y = mpg,
data = mtcars,
geom="boxplot")
cars_boxplot = ggplot(mtcars, aes(x = factor(cyl), y= mpg)) + geom_boxplot()
ggplotly()
cars_boxplot
library(ggplot2)
data("mtcars")
#This is the quick plot, simple version of ggplot2
qplot(mpg, wt, data=mtcars,
main = "Miles per gallon vs Weight",
xlab= "Miles per hour",
ylab = "Weight")
#Different and complex syntax:
ggplot(mtcars, aes(x=mpg,y=wt)) +
geom_point(shape=20)
#To show the points use
ggpubr::show_point_shapes()
#Representing the shapes:
#First we create a new column with factors:
mtcars$cylFactor = factor(mtcars$cyl)
#Speração por cor e formato
ggplot(mtcars, aes(x= mpg, y = wt, shape = factor(cyl))) +
geom_point(aes(colour = factor(cyl)))
#Utilizando cor, formato e tamanho:
myplot = ggplot(mtcars, aes(x= mpg, y = wt, shape = factor(carb), size = hp)) +
geom_point(aes(colour = factor(cyl))) +
xlab("Miles per gallon") +
ylab("Weight") +
labs( colour = "Cylinders", size = "Horse Power", shape = "Carburetors") +
ggtitle("Scatterplot")
library(plotly)
ggplotly()
install.packages("leaflet")
library(leaflet)
map() = leaflet()
map = leaflet()
map = leaflet() %>% addTiles()
map
map
map = addMarkers(lng = -23.566678, lat = -46.710370,
pop= 'Home')
map = leaflet() %>%
addTiles()  %>%
addMarkers(lng = -23.566678, lat = -46.710370,
pop=)
map = leaflet() %>%
addTiles()  %>%
addMarkers(lng = -23.566678, lat = -46.710370,
pop='Home')
map = leaflet() %>%
addTiles()  %>%
addMarkers(lng = -23.566678, lat = -46.710370, popup='Home')
map
map = leaflet() %>%
addTiles()  %>%
addMarkers(lat = -23.566678, lng = -46.710370, popup='Home')
map
map = leaflet() %>%
addProviderTiles("Stamen.Watercolor") %>%
addTiles()  %>%
addMarkers(lat = -23.566678, lng = -46.710370, popup='Home')
map
map = leaflet() %>%
addProviderTiles("Stamen.Watercolor") %>%
addTiles()  %>%
addMarkers(lat = -23.566678, lng = -46.710370, popup='Home')
map
data(quakes)
map2 = leaflet(quakes) %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
map2
View(quakes)
args(geom_histogram)
setwd('C:\\Users\\vitor\\Google Drive\\DS\\R-DataVisualization\\R-Statistics')
#Installing the tidyverse package which contains ggplot
# install.packages('tidyverse')
library(tidyverse)
housing = read.csv('landdata-states.csv')
head(housing[1:5])
# Histogram ---------------------------------------------------------------
#Simples histogram
hist(housing$Home.Value)
#ggplot histogram
ggplot(housing, aes(x=Home.Value)) +
geom_histogram(bins = 8)
# Colored Scatter graph, jitter and boxplot---------------------------------------------------
ggplot(housing, aes(x = Date, y = Home.Value, color = State)) +
geom_point()
#Com filtro para mostrar apenas alguns estados:
ggplot(filter(housing, State %in% c("AK", "FL")),
aes(y = Home.Value, x = Date, color = State)) +
geom_point()
#Boxplot de apenas dois estados
ggplot(filter(housing, State %in% c("AK", "FL")),
aes(x = State, y = Home.Value, color = State)) +
geom_boxplot()
#Jitter de dois estados
ggplot(filter(housing, State %in% c("AK", "FL")),
aes(x = State, y = Home.Value, color = Year)) +
geom_jitter()
# Explorying geometry -----------------------------------------------------
ggplot(filter(housing, Date == 2001.25),
aes(y = Structure.Cost, x = Land.Value, size = Home.Value)) +
geom_point()
ggplot(filter(housing, Date == 2001.25),
aes(y = Structure.Cost, x = Land.Value, shape = region)) +
geom_point()
ggplot(filter(housing, Date == 2001.25 & region %in% c("West")),
aes(y = Structure.Cost, x = Land.Value, color = State)) +
geom_point()
# Regression Line ---------------------------------------------------------
#Criar a regressão. E para isso criarmos uma nova coluna com os valores:
#subset apenaas com o primeiro? ou segundo? quartil de 2001:
housing_sub_2001q1 = filter(housing, Date == 2001.25)
#Coluna com a regressão:
housing_sub_2001q1$pred_SC = predict(lm(Structure.Cost ~ log(Land.Value), data = housing_sub_2001q1))
myplot = ggplot(housing_sub_2001q1, aes(y = Structure.Cost, x = log(Land.Value)))
myplot + geom_point(aes(color = Home.Value)) + geom_line(aes(y = pred_SC))
# Smotth ------------------------------------------------------------------
myplot + geom_smooth() + geom_point(aes(color = Home.Value))
# Text Labels -------------------------------------------------------------
myplot + geom_text(aes(label = State), size = 3, check_overlap = T)
install.packages('ggrepel')
library(ggrepel)
myplot + geom_point() +
geom_text_repel(aes(label=State), size = 3)
# Entendendo a fundo a estética -------------------------------------------
myplot + geom_point(aes(color = Home.Value, shape = region))
args(geom_histogram)
# Statistical Transformations ---------------------------------------------
args(geom_histogram)
args(stat_bin)
myhist = ggplot(housing, aes(x = Home.Value))
myhist + geom_histogram()
myhist + geom_histogram(stat = "bin", binwidth = 4000)
myhist + geom_histogram(stat = "bin", binwidth = 40000)
myhist + geom_histogram(stat = "bin", binwidth = 400000)
myhist + geom_histogram(stat = "bin", binwidth = 40000)
#Função agregate que permite aplicar alguma função de acordo com um algum critério de
# filtro das linhas
housing_mean_state = aggregate(housing['Home.Value'], housing['State'], FUN = mean)
View(housing_mean_state)
sample(housing_mean_state()
sample(housing_mean_state)
rbind(head(housing_mean_state), tail(housing_mean_state))
ggplot(housing_mean_state, (aes(x=State, y=Home.Value))) +
geom_bar()
ggplot(housing_mean_state, (aes(x=State, y=Home.Value))) +
geom_bar()
ggplot(housing_mean_state, aes(x=State, y=Home.Value)) +
geom_bar()
ggplot(housing_mean_state, aes(x=State, y=Home.Value)) +
geom_bar(stat = 'identity')
